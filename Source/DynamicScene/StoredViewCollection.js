/*global define*/
define(['../Core/AssociativeArray',
        '../Core/createGuid',
        '../Core/defined',
        '../Core/defineProperties',
        '../Core/Event',
        '../Core/TimeInterval',
        '../Core/Iso8601',
        '../Core/DeveloperError',
        '../Core/RuntimeError',
        './StoredView'
    ], function(
        AssociativeArray,
        createGuid,
        defined,
        defineProperties,
        Event,
        TimeInterval,
        Iso8601,
        DeveloperError,
        RuntimeError,
        StoredView) {
    "use strict";

    function fireChangedEvent(collection) {
        if (collection._suspendCount === 0) {
            var added = collection._addedViews;
            var removed = collection._removedViews;
            if (added.length !== 0 || removed.length !== 0) {
                collection._collectionChanged.raiseEvent(collection, added.values, removed.values);
                added.removeAll();
                removed.removeAll();
            }
        }
    }

    /**
     * An observable collection of {@link StoredView} instances where each instance has a unique name.
     * @alias StoredViewCollection
     * @constructor
     */
    var StoredViewCollection = function() {
        this._storedViews = new AssociativeArray();
        this._addedViews = new AssociativeArray();
        this._removedViews = new AssociativeArray();
        this._suspendCount = 0;
        this._collectionChanged = new Event();
        this._id = createGuid();
    };

    /**
     * Prevents {@link StoredViewCollection#collectionChanged} events from being raised
     * until a corresponding call is made to {@link StoredViewCollection#resumeEvents}, at which
     * point a single event will be raised that covers all suspended operations.
     * This allows for many items to be added and removed efficiently.
     * This function can be safely called multiple times as long as there
     * are corresponding calls to {@link StoredViewCollection#resumeEvents}.
     * @memberof StoredViewCollection
     */
    StoredViewCollection.prototype.suspendEvents = function() {
        this._suspendCount++;
    };

    /**
     * Resumes raising {@link StoredViewCollection#collectionChanged} events immediately
     * when an item is added or removed.  Any modifications made while while events were suspended
     * will be triggered as a single event when this function is called.
     * This function is reference counted and can safely be called multiple times as long as there
     * are corresponding calls to {@link StoredViewCollection#resumeEvents}.
     * @memberof StoredViewCollection
     *
     * @exception {DeveloperError} resumeEvents can not be called before suspendEvents.
     */
    StoredViewCollection.prototype.resumeEvents = function() {
        //>>includeStart('debug', pragmas.debug);
        if (this._suspendCount === 0) {
            throw new DeveloperError('resumeEvents can not be called before suspendEvents.');
        }
        //>>includeEnd('debug');

        this._suspendCount--;
        fireChangedEvent(this);
    };

    /**
     * The signature of the event generated by {@link StoredViewCollection#collectionChanged}.
     * @memberof StoredViewCollection
     * @function
     *
     * @param {StoredViewCollection} collection The collection that triggered the event.
     * @param {Array} added The array of {@link StoredView} instances that have been added to the collection.
     * @param {Array} removed The array of {@link StoredView} instances that have been removed from the collection.
     */
    StoredViewCollection.collectionChangedEventCallback = undefined;

    defineProperties(StoredViewCollection.prototype, {
        /**
         * Gets the event that is fired when stored views are added or removed from the collection.
         * The generated event is a {@link StoredViewCollection.collectionChangedEventCallback}.
         * @memberof StoredViewCollection.prototype
         *
         * @type {Event}
         */
        collectionChanged : {
            get : function() {
                return this._collectionChanged;
            }
        },
        /**
         * Gets a globally unique identifier for this collection.
         * @memberof StoredViewCollection.prototype
         *
         * @type {String}
         */
        id : {
            get : function() {
                return this._id;
            }
        }
    });

    /**
     * Add a stored view to the collection.
     * @memberof StoredViewCollection
     *
     * @param {StoredView} storedView The stored view to be added.
     * @exception {DeveloperError} A view with <storedView.name> already exists in this collection.
     */
    StoredViewCollection.prototype.add = function(storedView) {
        //>>includeStart('debug', pragmas.debug);
        if (!defined(storedView)) {
            throw new DeveloperError('storedView is required.');
        }
        //>>includeEnd('debug');

        var name = storedView.name;
        var storedViews = this._storedViews;
        if (defined(storedViews.get(name))) {
            throw new RuntimeError('A stored view with name ' + name + ' already exists in this collection.');
        }

        storedViews.set(name, storedView);

        var removedViews = this._removedViews;
        if (!this._removedViews.remove(name)) {
            this._addedViews.set(name, storedView);
        }
        fireChangedEvent(this);
    };

    /**
     * Removes a stored view from the collection.
     * @memberof StoredViewCollection
     *
     * @param {StoredView} storedView The stored view to be added.
     * @returns {Boolean} true if the item was removed, false if it did not exist in the collection.
     */
    StoredViewCollection.prototype.remove = function(storedView) {
        //>>includeStart('debug', pragmas.debug);
        if (!defined(storedView)) {
            throw new DeveloperError('storedView is required');
        }
        //>>includeEnd('debug');

        return this.removeByName(storedView.name);
    };

    /**
     * Removes a stored view with the provided name from the collection.
     * @memberof StoredViewCollection
     *
     * @param {String} name The name of the stored view to remove.
     * @returns {Boolean} true if the item was removed, false if no item with the provided name existed in the collection.
     */
    StoredViewCollection.prototype.removeByName = function(name) {
        //>>includeStart('debug', pragmas.debug);
        if (!defined(name)) {
            throw new DeveloperError('name is required.');
        }
        //>>includeEnd('debug');

        var storedViews = this._storedViews;
        var storedView = storedViews.get(name);
        if (!this._storedViews.remove(name)) {
            return false;
        }

        if (!this._addedViews.remove(name)) {
            this._removedViews.set(name, storedView);
        }
        fireChangedEvent(this);

        return true;
    };

    /**
     * Removes all stored views from the collection.
     * @memberof StoredViewCollection
     */
    StoredViewCollection.prototype.removeAll = function() {
        //The event should only contain items added before events were suspended
        //and the contents of the collection.
        var storedViews = this._storedViews;
        var storedViewsLength = storedViews.length;
        var array = storedViews.values;

        var addedViews = this._addedViews;
        var removed = this._removedViews;

        for (var i = 0; i < storedViewsLength; i++) {
            var existingItem = array[i];
            var existingItemName = existingItem.name;
            var addedItem = addedViews.get(existingItemName);
            if (!defined(addedItem)) {
                removed.set(existingItemName, existingItem);
            }
        }

        storedViews.removeAll();
        addedViews.removeAll();
        fireChangedEvent(this);
    };

    /**
     * Gets a stored view with the specified name.
     * @memberof StoredViewCollection
     *
     * @param {String} name The name of the stored view to retrieve.
     * @returns {StoredView} The stored view with the provided name or undefined if the name did not exist in the collection.
     */
    StoredViewCollection.prototype.getByName = function(name) {
        //>>includeStart('debug', pragmas.debug);
        if (!defined(name)) {
            throw new DeveloperError('name is required.');
        }
        //>>includeEnd('debug');

        return this._storedViews.get(name);
    };

    /**
     * Gets the array of StoredView instances in the collection.
     * The array should not be modified directly.
     * @memberof StoredViewCollection
     *
     * @returns {Array} the array of StoredView instances in the collection.
     */
    StoredViewCollection.prototype.getStoredViews = function() {
        return this._storedViews.values;
    };

    return StoredViewCollection;
});
